Filen updaterad 07/04/2021 16:33:30

7seg.asm: 

 TODO:
       * Argument för att styra till punkten
       * Gör en rutin för att skriva ut hel byte(i hex) till båda displayerna (bra för felsökning?)
       
 
DAmatrix.asm: 

 TODO:
       * Läs eventuellt in DDRB och or:a in istället vid init (för kompabilitet med högtalaren)
       * Lös bugg med blinkande lampor om få "pixlar" är tända
       * Ändra flashutskriftrutin till att ta argument, så kan man mata in vilken laddad tabell som helst. (Bra för vinstskärmar/animationer?)
       
 
gameengine.asm: 

 TODO:
       *

 
lcd.asm: 

 TODO:
       * Gör om rutinerna för att funka med TWI (KLAR)
       * Stöd för att skriva till båda raderna
		* Ändra så att LCD_FLASH_PRINT skriver från ett valbart meddelande i flash, skickat som argument
		* (Ev. samma för LINE, eller bygg på med bättre rutiner för att skriva saker dit.)
		* Integrera knappstyrning?
       
 
led.asm: 

 TODO:
       * Övriga LEDs förutom rotary encoderns LEDs

 
main.asm: 

 TODO:
       * Massor
       
       
 
mall.asm: 

 TODO:
       *

 ;
::::::::::::::::

#ifndef _GAME_ENGINE_
#define _GAME_ENGINE_


::::::::::::::::
       Titel
::::::::::::::::


#endif /* _GAME_ENGINE_ */
::::::::::::::::
	End of file
::::::::::::::::memory.asm: 

port_definitions.asm: 

speaker.asm: 

 TODO:
       *

 ;
::::::::::::::::

#ifndef _SPEAKER_
#define _SPEAKER_
        
         F(Speaker Timer)  = 500 000 Hz

        .equ        NOTE_G  = 80        = F(ST)/F(G)*2 ; F(G) = 3135.963 Hz
        .equ        NOTE_A  = 71        = F(ST)/F(A)*2 ; F(A) = 3520.000 Hz
        .equ        NOTE_B  = 63        = F(ST)/F(B)*2 ; F(B) = 3951.066 Hz


		 Längder för tonerna om dom ska vara 0.05 sekunder
		.equ 		NOTE_G_005_H	= $01
		.equ 		NOTE_G_005_L	= $3A		
		.equ 		NOTE_A_005_H	= $01
		.equ 		NOTE_A_005_L	= $60
		.equ 		NOTE_B_005_H	= $01
		.equ 		NOTE_B_005_L	= $8B


::::::::::::::::
       Titel
::::::::::::::::

 .equ	SECOND_TICKS = 62500 - 1	; @ 16/256 MHz

 TIMER1_INIT:
 	push	r16
 	ldi		r16, (1<<WGM12)|(1<<CS11)|(1<<CS10)	; CTC, prescale 64
 	sts		TCCR1B, r16
 	ldi		r16, HIGH(SECOND_TICKS)
 	sts		OCR1AH, r16
 	ldi		r16, LOW(SECOND_TICKS)
 	sts		OCR1AL, r16
 	ldi		r16, (1<<OCIE1A)			; allow to interrupt
 	sts		TIMSK1, r16
 	pop		r16
 	ret

TIMER2_INIT:
        push 	r16
                                             Set data direction till output för Speaker pin
        ldi		r16, (1<<SPEAKER)
		out		DDRB, r16
        sbi     DDRB, SPEAKER
		
        ldi		r16, (1<<WGM21)	 CTC
        sts		TCCR2A, r16
        ldi		r16, (0<<CS22)|(1<<CS21)|(1<<CS20)	 prescale 32
        sts		TCCR2B, r16
        pop     r16
        ret

ENABLE_SPEAKER_INT:
        ldi		r16, (1<<OCIE2A)			 allow to interrupt
	    sts		TIMSK2, r16
        ret

DISABLE_SPEAKER_INT:
        ldi		r16, (0<<OCIE2A)			 allow to interrupt
	    sts		TIMSK2, r16
        ret

PLAY_NOTE_G:
        ldi     r16, NOTE_G
        sts     OCR2A, r16
		ldi		r16, NOTE_G_005_H
		sts 	NOTE_LENGTH_HIGH, r16
		ldi 	r16, NOTE_G_005_L
		sts 	NOTE_LENGTH_LOW, r16
        call    ENABLE_SPEAKER_INT
        ret

PLAY_NOTE_A:
        ldi     r16, NOTE_A
        sts     OCR2A, r16
		ldi		r16, NOTE_A_005_H
		sts 	NOTE_LENGTH_HIGH, r16
		ldi 	r16, NOTE_A_005_L
		sts 	NOTE_LENGTH_LOW, r16
        call    ENABLE_SPEAKER_INT
        ret

PLAY_NOTE_B:
        ldi     r16, NOTE_B
        sts     OCR2A, r16
        ldi	r16, NOTE_B_005_H
        sts 	NOTE_LENGTH_HIGH, r16
        ldi 	r16, NOTE_B_005_L
        sts 	NOTE_LENGTH_LOW, r16
        call    ENABLE_SPEAKER_INT
        ret

STOP_SPEAKER:
        cbi		PORTB, PB1
        call    DISABLE_SPEAKER_INT
        ret

SPEAKER_TIMER_INT:
        push	r16
        in		r16, SREG
        push	r16

        call    TOGGLE_SPEAKER
		call	CHECK_NOTE_LENGTH

        pop		r16
        out		SREG, r16
        pop		r16
        reti


TOGGLE_SPEAKER:
        sbis    PORTB, PB1
    	rjmp    TOGGLE_SPEAKER_ON
        rjmp    TOGGLE_SPEAKER_OFF
TOGGLE_SPEAKER_ON:
        sbi		PORTB, PB1
        rjmp    TOGGLE_SPEAKER_DONE
TOGGLE_SPEAKER_OFF:		
		cbi		PORTB, PB1
TOGGLE_SPEAKER_DONE:
        ret


CHECK_NOTE_LENGTH:
		push	r25
		push 	r24
        lds 	r24, NOTE_LENGTH_LOW
		lds 	r25, NOTE_LENGTH_HIGH
		sbiw	r25:r24, 1
		breq	STOP_NOTE
		sts 	NOTE_LENGTH_LOW, r24
		sts 	NOTE_LENGTH_HIGH, r25
		rjmp 	CHECK_NOTE_DONE
STOP_NOTE:
		call	STOP_SPEAKER
CHECK_NOTE_DONE:
		pop 	r24
		pop 	r25
		ret

#endif /* _SPEAKER_ */
::::::::::::::::
	End of file
::::::::::::::::switches.asm: 

 TODO:
		* Gör rutiner för joysticksen. (DELVIS KLAR)
		* Avkoda AD-signaler från dom båda joysticksens två axlar på ett bättre sätt (förslag: 1byte - 2bits/axel för båda joysticksen genom tabell-intervall)
       * Skriv eventuellt alternativ rutin för att kolla samtliga knappar, eller avkoda SWITCHES.

 
twi.asm: 

 TODO:
       * Lägg till felkodshantering
       * Interuppt-säkra
       * Gör varianter för att skicka/ta emot mer än 1 byte vid varje transaktion.
       * Anpassa eventuellt namn till drivrutins-standard
		
 
